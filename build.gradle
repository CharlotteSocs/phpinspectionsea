import org.gradle.api.tasks.testing.logging.TestExceptionFormat

buildscript {
    repositories {
        mavenCentral()

        maven { url 'https://jetbrains.bintray.com/intellij-third-party-dependencies' }
        maven { url 'https://jitpack.io' }
        maven { url 'https://dl.bintray.com/jetbrains/intellij-plugin-service' }
    }
}

plugins {
    id "org.jetbrains.intellij"   version "0.4.15"
    id 'com.palantir.git-version' version "0.11.0"
}

group 'com.kalessil.phpStorm.phpInspectionsUltimate'

def htmlFixer = { htmlFile -> file(htmlFile).text.replace('<html>', '').replace('</html>', '') }

intellij {
    version    ideaVersion
    pluginName 'Php Inspections (EA Ultimate)'

    def versionParts = ideaVersion.replace('IU-', '').split('\\.')
    if ((Integer.parseInt(versionParts[0]) == 2019 && Integer.parseInt(versionParts[1]) >= 2) || Integer.parseInt(versionParts[0]) > 2019) {
        /* since 2019.2 Java is a separate plugin, hence we have to specify it implicitly */
        plugins = [
                'java',
                "com.jetbrains.php:${phpPluginVersion}",
                'CSS',
                'java-i18n',
                'properties',
                'yaml',
        ]
    } else {
        plugins = [
                "com.jetbrains.php:${phpPluginVersion}",
                'CSS',
                'java-i18n',
                'properties',
                'yaml',
        ]
    }
}

patchPluginXml {
    sinceBuild        = "162.1889"
    untilBuild        = ""
    changeNotes       = htmlFixer('src/main/resources/META-INF/change-notes.html')
    pluginDescription = htmlFixer('src/main/resources/META-INF/description.html')
}

sourceSets {
    test {
        resources {
            srcDir 'testData'
        }
    }
}

dependencies {
    compile files("lib/TurboActivate.jar")
}

wrapper {
    gradleVersion '4.8'
}

jar {
    baseName = "PhpInspectionsUltimate"
    /* I didn't manage to make id "com.github.johnrengelman.shadow" version "2.0.4" working, hence we are doing this */
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

test.testLogging.exceptionFormat = TestExceptionFormat.FULL
compileJava.options.encoding     = 'UTF-8'
