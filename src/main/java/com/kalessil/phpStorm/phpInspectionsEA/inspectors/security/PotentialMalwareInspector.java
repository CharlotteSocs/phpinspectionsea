package com.kalessil.phpStorm.phpInspectionsEA.inspectors.security;

import com.intellij.codeInspection.LocalInspectionTool;
import com.intellij.codeInspection.ProblemHighlightType;
import com.intellij.codeInspection.ProblemsHolder;
import com.intellij.openapi.util.text.StringUtil;
import com.intellij.psi.PsiElement;
import com.intellij.psi.PsiElementVisitor;
import com.jetbrains.php.lang.lexer.PhpTokenTypes;
import com.jetbrains.php.lang.psi.elements.*;
import com.kalessil.phpStorm.phpInspectionsEA.openApi.BasePhpElementVisitor;
import com.kalessil.phpStorm.phpInspectionsEA.utils.ExpressionSemanticUtil;
import com.kalessil.phpStorm.phpInspectionsEA.utils.PossibleValuesDiscoveryUtil;
import org.jetbrains.annotations.NotNull;

import java.util.HashSet;

public class PotentialMalwareInspector extends LocalInspectionTool {
    private static final String messageEval     = "This eval looks pretty much as some malware.";
    private static final String messageFileHide = "This looks pretty much as some malware hiding files manipulation.";
    private static final String messageDecode   = "This function looks pretty much as part of some malware.";

    private static final HashSet<String> evalSuspects   = new HashSet<>();
    private static final HashSet<String> decodeSuspects = new HashSet<>();
    static {
        evalSuspects.add("base64_decode");
        evalSuspects.add("gzinflate");
        evalSuspects.add("urldecode");
        evalSuspects.add("file_get_contents");
        evalSuspects.add("curl_exec");

        decodeSuspects.add("base64_decode");
        decodeSuspects.add("gzinflate");
        decodeSuspects.add("urldecode");
    }

    @NotNull
    public String getShortName() {
        return "PotentialMalwareInspection";
    }

    @Override
    @NotNull
    public PsiElementVisitor buildVisitor(@NotNull final ProblemsHolder holder, boolean isOnTheFly) {
        return new BasePhpElementVisitor() {
            public void visitPhpFunctionCall(FunctionReference reference) {
                final PsiElement[] params = reference.getParameters();
                final String functionName = reference.getName();
                if (3 == params.length && !StringUtil.isEmpty(functionName) && functionName.equals("touch")) {
                    holder.registerProblem(reference, messageFileHide, ProblemHighlightType.GENERIC_ERROR);
                }
            }

            @Override
            public void visitPhpEval(@NotNull PhpEval eval) {
                /* get through "(...)" and "@..." constructs */
                PsiElement argument = eval.getFirstPsiChild();
                /* TODO: merge into getExpressionThruParenthesises */
                while (argument instanceof UnaryExpression || argument instanceof ParenthesizedExpression) {
                    if (argument instanceof ParenthesizedExpression) {
                        argument = ((ParenthesizedExpression) argument).getArgument();
                        continue;
                    }

                    final UnaryExpression unaryArgument = (UnaryExpression) argument;
                    final PsiElement operator           = unaryArgument.getOperation();
                    if (null != operator && PhpTokenTypes.opSILENCE == operator.getNode().getElementType()) {
                        argument = unaryArgument.getValue();
                        continue;
                    }

                    break;
                }

                /* if argument is not a function call or not a target function, terminate inspection */
                if (!(argument instanceof FunctionReference)) {
                    return;
                }
                final String name            = ((FunctionReference) argument).getName();
                if (StringUtil.isEmpty(name) || !evalSuspects.contains(name.toLowerCase())) {
                    return;
                }

                /* eval(file_get_contents('php://input')) is widely used as an interactive console */
                if (name.equalsIgnoreCase("file_get_contents")) {
                    final PsiElement[] params = ((FunctionReference) argument).getParameters();
                    if (params.length > 0 && params[0] instanceof StringLiteralExpression) {
                        return;
                    }
                }

                /* fire a warning message */
                holder.registerProblem(eval, messageEval, ProblemHighlightType.GENERIC_ERROR);
            }

            public void visitPhpFunction(Function function) {
                /* we expect return to be the last statement */
                final GroupStatement body      = ExpressionSemanticUtil.getGroupStatement(function);
                final PsiElement lastStatement = null == body ? null : ExpressionSemanticUtil.getLastStatement(body);
                final PsiElement target        = function.getNameIdentifier();
                if (!(lastStatement instanceof PhpReturn) || null == target) {
                    return;
                }
                /* we need 2+ expressions in the body */
                if (ExpressionSemanticUtil.countExpressionsInGroup(body) < 2) {
                    return;
                }

                /* decode function is hidden */
                PsiElement returnArgument = ExpressionSemanticUtil.getReturnValue((PhpReturn) lastStatement);
                /* TODO: merge into getExpressionThruParenthesises */
                while (returnArgument instanceof UnaryExpression || returnArgument instanceof ParenthesizedExpression) {
                    if (returnArgument instanceof ParenthesizedExpression) {
                        returnArgument = ((ParenthesizedExpression) returnArgument).getArgument();
                        continue;
                    }

                    final UnaryExpression unaryArgument = (UnaryExpression) returnArgument;
                    final PsiElement operator           = unaryArgument.getOperation();
                    if (null != operator && PhpTokenTypes.opSILENCE == operator.getNode().getElementType()) {
                        returnArgument = unaryArgument.getValue();
                        continue;
                    }

                    break;
                }

                /* we expect a function reference returned */
                if (!(returnArgument instanceof FunctionReference)) {
                    return;
                }
                final FunctionReference call = (FunctionReference) returnArgument;


                /* Case 1: analyze implicit function call */
                final String callName = call.getName();
                if (!StringUtil.isEmpty(callName) && decodeSuspects.contains(callName.toLowerCase())) {
                    holder.registerProblem(target, messageDecode, ProblemHighlightType.GENERIC_ERROR);
                    return;
                }


                /* Case 2: analyze variable function call */
                if (!(call.getFirstPsiChild() instanceof Variable)) {
                    return;
                }
                final HashSet<PsiElement> processed = new HashSet<>();
                final HashSet<PsiElement> values    = PossibleValuesDiscoveryUtil.discover(call.getFirstPsiChild(), processed);
                if (values.size() > 0) {
                    for (PsiElement value : values) {
                        if (value instanceof StringLiteralExpression) {
                            final String name = ((StringLiteralExpression) value).getContents().toLowerCase();
                            if (decodeSuspects.contains(name)) {
                                /* fire a warning message */
                                holder.registerProblem(target, messageDecode, ProblemHighlightType.GENERIC_ERROR);
                                break;
                            }
                        }
                    }
                    values.clear();
                }
                processed.clear();
            }
        };
    }
}
