package com.kalessil.phpStorm.phpInspectionsEA.inspectors.security;

import com.intellij.codeInspection.LocalInspectionTool;
import com.intellij.codeInspection.ProblemHighlightType;
import com.intellij.codeInspection.ProblemsHolder;
import com.intellij.openapi.util.text.StringUtil;
import com.intellij.psi.PsiElement;
import com.intellij.psi.PsiElementVisitor;
import com.jetbrains.php.lang.lexer.PhpTokenTypes;
import com.jetbrains.php.lang.psi.elements.*;
import com.kalessil.phpStorm.phpInspectionsEA.openApi.BasePhpElementVisitor;
import org.jetbrains.annotations.NotNull;

import java.util.HashSet;

public class PotentialMalwareInspector extends LocalInspectionTool {
    private static final String message = "This eval looks pretty much as some malware";

    private static final HashSet<String> evalSuspects   = new HashSet<>();
    private static final HashSet<String> decodeSuspects = new HashSet<>();
    static {
        evalSuspects.add("base64_decode");
        evalSuspects.add("gzinflate");
        evalSuspects.add("urldecode");
        evalSuspects.add("file_get_contents");
        evalSuspects.add("curl_exec");

        decodeSuspects.add("base64_decode");
        decodeSuspects.add("gzinflate");
        decodeSuspects.add("urldecode");
    }

    @NotNull
    public String getShortName() {
        return "PotentialMalwareInspection";
    }

    @Override
    @NotNull
    public PsiElementVisitor buildVisitor(@NotNull final ProblemsHolder holder, boolean isOnTheFly) {
        return new BasePhpElementVisitor() {
            public void visitPhpElement(PhpPsiElement element) {
                if (!(element instanceof PhpEval)) {
                    return;
                }

                /* get through "(...)" and "@..." constructs */
                final PhpEval eval  = (PhpEval) element;
                PsiElement argument = eval.getFirstPsiChild();
                while (argument instanceof UnaryExpression || argument instanceof ParenthesizedExpression) {
                    if (argument instanceof ParenthesizedExpression) {
                        argument = ((ParenthesizedExpression) argument).getArgument();
                        continue;
                    }

                    UnaryExpression unaryArgument = (UnaryExpression) argument;
                    PsiElement operator           = unaryArgument.getOperation();
                    if (null != operator && PhpTokenTypes.opSILENCE == operator.getNode().getElementType()) {
                        argument = unaryArgument.getValue();
                    }
                }

                /* if argument is not a function call or not a target function, terminate inspection */
                if (!(argument instanceof FunctionReference)) {
                    return;
                }
                final String name            = ((FunctionReference) argument).getName();
                if (StringUtil.isEmpty(name) || !evalSuspects.contains(name.toLowerCase())) {
                    return;
                }

                /* eval(file_get_contents('php://input')) is widely used as an interactive console */
                if (name.equalsIgnoreCase("file_get_contents")) {
                    final PsiElement[] params = ((FunctionReference) argument).getParameters();
                    if (params.length > 0 && params[0] instanceof StringLiteralExpression) {
                        return;
                    }
                }

                /* fire a warning message */
                holder.registerProblem(eval, message, ProblemHighlightType.GENERIC_ERROR);
            }
        };
    }
}
